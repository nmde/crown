import fsExtra from 'fs-extra';
import moment from 'moment';
import path from 'path';
import Client from '../src/frontend/client';
import Server from '../src/backend/server';
import PostData from '../src/types/PostData';
import Post from '../src/backend/models/Post';

const dbPath = path.join(__dirname, 'test.sqlite');
const server = new Server(dbPath, 3000);
const client = new Client('http://localhost:3000');

// Clear database generated by last test
if (fsExtra.pathExistsSync(dbPath)) {
  fsExtra.unlinkSync(dbPath);
}

function stripPost(data: Post): PostData {
  return {
    author: data.author,
    expires: data.expires,
    media: data.media,
    text: data.text,
    date: data.date,
  };
}

test('start server', async () => {
  expect(await server.start()).toEqual(3000);
  expect(server.httpServer).not.toBeUndefined();
});

describe('posts', () => {
  const emptyPost: PostData = {
    author: 0,
    media: 'media.jpg',
    text: 'Hello, World!',
    expires: moment().add(1, 'day').toISOString(),
    date: new Date().toISOString(),
  };
  let postId = '';
  test('create a post', async () => {
    const response = await client.createPost(emptyPost);
    if (response.success === false) {
      console.log(response.error);
    } else if (response.data !== undefined) {
      postId = response.data.id;
      expect(stripPost(response.data)).toMatchObject(emptyPost);
    }
    expect(response.success).toBeTruthy();
  });
  test('get a post', async () => {
    const response = await client.getPost(postId);
    if (response.success === false) {
      console.log(response.error);
    } else if (response.data !== undefined) {
      expect(stripPost(response.data)).toMatchObject(emptyPost);
    }
    expect(response.success).toBeTruthy();
  });
});

describe('users', () => {
  test('create a user', async () => {
    await client.createUser({
      username: 'user1',
      password: '1234567',
      displayName: 'John Smith',
    });
  });
});

test('stop server', async () => {
  await server.stop();
  expect(server.httpServer).toBeUndefined();
});
